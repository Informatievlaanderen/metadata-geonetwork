version: '3.8'

volumes:
  geonetwork:
  esdata:

# TODO extend the top level docker-compose instead of redefining everything
# TODO add health checks to, e.g., postgres, so we know it's up and 'depends' work correctly

services:

  e2e:
    image: cypress
    build: .
    depends_on:
      geonetwork:
        condition: service_healthy
    # note: inside e2e container, the network allows accessing
    # "web" host under name "web"
    # so "curl http://web" would return whatever the webserver
    # in the "web" container is cooking
    # see https://docs.docker.com/compose/networking/
    environment:
      - CYPRESS_baseUrl=http://geonetwork:8080/geonetwork
    command: npx cypress run --browser chrome
    # mount the host directory e2e/cypress and the file e2e/cypress.config.ts as
    # volumes within the container
    # this means that:
    #  1. anything that Cypress writes to these folders (e.g., screenshots,
    #     videos) appears also on the Docker host's filesystem
    #  2. any change that the developer applies to Cypress files on the host
    #     machine immediately takes effect within the e2e container (no docker
    #     rebuild required).
    volumes:
      - ./cypress:/app/cypress
      - ./cypress.config.ts:/app/cypress.config.ts
      - ./tsconfig.json:/app/tsconfig.json

  database:
    image: postgres:15.0
    restart: always
    environment:
      POSTGRES_PASSWORD: geonetwork
      POSTGRES_USER: geonetwork
      POSTGRES_DB: geonetwork
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    command: [ "postgres",
               "-c", "log_statement=all",
               "-c", "logging_collector=true",
               "-c", "log_file_mode=0644",
               "-c", "log_directory=/var/log/postgresql",
               "-c", "log_filename=postgresql.log" ]
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql

  liquibase:
    image: maven
    depends_on:
      database:
        condition: service_healthy
    working_dir: /liquibase
    volumes:
      - ../liquibase:/liquibase
    # Command to run the liquibase update service
    command: mvn liquibase:update -Ploc -Dliquibase.username=geonetwork -Dliquibase.password=geonetwork -Dliquibase.url=jdbc:postgresql://database:5432/geonetwork -Dgn.system.feedback.mailServer.password=abc -Dmdv.passwordhash=46e44386069f7cf0d4f2a420b9a2383a612f316e2024b0fe84052b0b96c479a23e8a0be8b90fb8c2

  geonetwork:
    image: geonetwork
    depends_on:
      elasticsearch:
        condition: service_healthy
      liquibase:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    restart: always
    healthcheck:
      test: "curl -f http://localhost:8080/geonetwork"
      interval: 5s
      timeout: 5s
      retries: 20
    environment:
      DATA_DIR: /geonetwork-data
      JAVA_OPTS: >
        -Dorg.eclipse.jetty.annotations.AnnotationParser.LEVEL=OFF
        -Djava.security.egd=file:/dev/./urandom -Djava.awt.headless=true
        -Xms512M -Xss512M -Xmx2G -XX:+UseConcMarkSweepGC
        -Dgeonetwork.dir=/geonetwork-data
        -Dgeonetwork.codeList.dir=/var/lib/jetty/webapps/root/WEB-INF/data/config/codelist
        -Dgeonetwork.schema.dir=/var/lib/jetty/webapps/root/WEB-INF/data/config/schema_plugins
      ES_HOST: elasticsearch
      ES_PROTOCOL: http
      ES_PORT: 9200

      GEONETWORK_DB_TYPE: postgres
      GEONETWORK_DB_HOST: database
      GEONETWORK_DB_PORT: 5432
      GEONETWORK_DB_NAME: geonetwork
      GEONETWORK_DB_USERNAME: geonetwork
      GEONETWORK_DB_PASSWORD: geonetwork

      GEONETWORK_MICROSERVICESPROXY_TARGETURI: http://ogc-api-records-service:8080
    volumes:
      - geonetwork:/geonetwork-data

  ogc-api-records-service:
    image: geonetwork/gn-cloud-ogc-api-records-service:0.2.0
    depends_on:
      liquibase:
        condition: service_completed_successfully
      elasticsearch:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: standalone
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/geonetwork
      SPRING_DATASOURCE_USERNAME: geonetwork
      SPRING_DATASOURCE_PASSWORD: geonetwork
      GN_BASEURL: http://geonetwork:8080/geonetwork/api
      GN_LEGACY_URL: http://geonetwork:8080/geonetwork
      GN_INDEX_URL: http://elasticsearch:9200
      SERVER_FORWARDHEADERSSTRATEGY: FRAMEWORK

  elasticsearch:
    # TODO: upgrade elasticsearch to latest v7
    image: elasticsearch:7.11.1
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test: curl -s http://localhost:9200 >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 50
    environment:
      ES_JAVA_OPTS: "-Xms1G -Xmx1G"
      discovery.type: single-node
    volumes:
      - esdata:/usr/share/elasticsearch/data
