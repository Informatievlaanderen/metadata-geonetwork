######
# INFO
######
# - optional stages should be an upcoming feature, instead of having to rely on approval timeouts (https://developercommunity.visualstudio.com/t/manually-triggered-stages-in-yaml-multi-stage-pipe/697467)

######
# POOL
######
pool: dv-prd-ubuntu2204

###########
# VARIABLES
###########
variables:
  - name: subscription
    value: METADATA-dev
  - name: clusterRg
    value: pre-md-cluster-rg
  - name: clusterName
    value: pre-md-cluster-aks
  - name: mavenCacheFolder
    value: $(Pipeline.Workspace)/.m2/repository
  - name: mavenCacheOpts
    value: '-Dmaven.repo.local=$(mavenCacheFolder)'
  - name: serviceConnection
    value: md-azuredevops-sc
  - name: devopsKeyvault
    value: prd-md-devops-kv

########
# STAGES
########
stages:

# check whether we can/should skip this pipeline, e.g., for comment-only fixes
- stage: skipcheck
  jobs:
    - job: skipcheck
      steps:
        - bash: |
            echo "Testing whether we need to skip the pipeline."
            substring='skipci'
            echo "> substring: $substring"
            echo "> commit message: $COMMIT_MESSAGE"
            if [[ "$COMMIT_MESSAGE" == *"$substring"* ]];
            then
              echo "> '$substring' was found in the commit message, skipping the pipeline."
              echo "##vso[task.setvariable variable=skip;isoutput=true]true"
            else
              echo "> '$substring' was not found in the commit message, proceeding with pipeline."
              echo "##vso[task.setvariable variable=skip;isoutput=true]false"
            fi
          name: skipcheck
          env:
            COMMIT_MESSAGE: $(Build.SourceVersionMessage)

# build and publish the necessary artefacts
- stage: build
  dependsOn: skipcheck
  condition: and(succeeded('skipcheck'),eq(dependencies.skipcheck.outputs['skipcheck.skipcheck.skip'], 'false'))
  jobs:
    - job: build
      timeoutInMinutes: "60"
      steps:
        - checkout: self
          displayName: Set up repository
          submodules: recursive # needed for submodules
        - task: Bash@3
          displayName: Set git commit sha as env var
          inputs:
            targetType: 'inline'
            script: |
              GIT_COMMIT_SHA=$(git rev-parse HEAD)
              echo "GIT_COMMIT_SHA: ${GIT_COMMIT_SHA}"
              echo "##vso[task.setvariable variable=GIT_COMMIT_SHA]${GIT_COMMIT_SHA}"
        - task: Bash@3
          displayName: Retrieve project version
          inputs:
            targetType: 'inline'
            workingDirectory: 'vlaanderen'
            script: |
              VL_GEONETWORK_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
              echo "VL_GEONETWORK_VERSION: ${VL_GEONETWORK_VERSION}"
              echo "##vso[task.setvariable variable=VL_GEONETWORK_VERSION]${VL_GEONETWORK_VERSION}"
        - task: Cache@2
          inputs:
            # bump 'versionx' to make sure the cache is cleared
            key: 'version2 | maven | "$(Agent.OS)" | **/pom.xml'
            restoreKeys: |
              maven | "$(Agent.OS)"
              maven
            path: $(mavenCacheFolder)
          displayName: Cache Maven local repo
        - task: Maven@3
          displayName: Build project artifacts
          inputs:
            mavenPomFile: 'pom.xml'
            mavenOptions: '-Xmx3072m $(mavenCacheOpts)'
            javaHomeOption: 'JDKVersion'
            jdkVersionOption: '1.11'
            jdkArchitectureOption: 'x64'
            publishJUnitResults: true
            testResultsFiles: '**/surefire-reports/TEST-*.xml'
            goals: 'clean install'
            options: ' -DskipTests -Pwar -Dmaven.artifact.threads=30 -Dwro4j-prebuild-cache '
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: 'web/target/geonetwork.war'
            ArtifactName: 'geonetwork.war'
            publishLocation: 'Container'
        - task: Docker@2
          displayName: Build web image and push to preprod container registry (premdacr)
          inputs:
            containerRegistry: 'premdacr'
            repository: 'metadata/geonetwork'
            command: 'buildAndPush'
            Dockerfile: 'web/Dockerfile'
            tags: |
              latest
              $(GIT_COMMIT_SHA)
              $(VL_GEONETWORK_VERSION)
        - task: Docker@2
          displayName: Build web image and push to preprod container registry (prdmdacr)
          inputs:
            containerRegistry: 'prdmdacr'
            repository: 'metadata/geonetwork'
            command: 'buildAndPush'
            Dockerfile: 'web/Dockerfile'
            tags: |
              latest
              $(GIT_COMMIT_SHA)
              $(VL_GEONETWORK_VERSION)

- template: azure-pipelines-deploy.yml
  parameters:
    subscription: METADATA-dev
    clusterRg: pre-md-cluster-rg
    clusterName: pre-md-cluster-aks
    namespace: dev
    acr: premdacr
    serviceConnection: ${{ variables.serviceConnection }}
    devopsKeyVault: prd-md-devops-kv

- template: azure-pipelines-deploy.yml
  parameters:
    subscription: METADATA-dev
    clusterRg: pre-md-cluster-rg
    clusterName: pre-md-cluster-aks
    namespace: bet
    acr: premdacr
    serviceConnection: ${{ variables.serviceConnection }}
    devopsKeyVault: prd-md-devops-kv

- template: azure-pipelines-deploy.yml
  parameters:
    subscription: METADATA-productie
    clusterRg: prd-md-cluster-rg
    clusterName: prd-md-cluster-aks
    namespace: prd
    acr: prdmdacr
    serviceConnection: ${{ variables.serviceConnection }}
    devopsKeyVault: prd-md-devops-kv
