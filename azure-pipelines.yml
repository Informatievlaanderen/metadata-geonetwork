variables:
  - name: subscription
    value: METADATA-dev
  - name: clusterRg
    value: pre-md-cluster-rg
  - name: clusterName
    value: pre-md-cluster-aks
  - name: mavenCacheFolder
    value: $(Pipeline.Workspace)/.m2/repository
  - name: mavenCacheOpts
    value: '-Dmaven.repo.local=$(mavenCacheFolder)'
  - name: namespace
    ${{ if eq(variables['Build.SourceBranchName'], 'beta') }}:
      value: bet
    ${{ else }}:
      value: dev

jobs:
  - job: skipcheck
    # itss linux build server
    pool: dv-dev-ubuntu2204
    steps:
      - bash: |
          echo "Testing whether we need to skip the pipeline."
          substring='skipci'
          echo "> substring: $substring"
          echo "> commit message: $COMMIT_MESSAGE"
          echo "> namespace: $(namespace)"
          if [[ "$COMMIT_MESSAGE" == *"$substring"* ]];
          then
            echo "> '$substring' was found in the commit message."
            echo "##vso[task.setvariable variable=skip;isoutput=true]true"
          else
            echo "##vso[task.setvariable variable=skip;isoutput=true]false"
          fi
        name: skipcheck
        env:
          COMMIT_MESSAGE: $(Build.SourceVersionMessage)
  - job: publish
    dependsOn: skipcheck
    condition: and(succeeded(), eq(dependencies.skipcheck.outputs['skipcheck.skip'], 'false'))
    timeoutInMinutes: "60"
    # itss linux build server
    pool: dv-dev-ubuntu2204
    steps:
      - checkout: self
        displayName: Set up repository
        submodules: recursive # needed for submodules
      - task: AzureCLI@2
        displayName: Configure access to aks cluster
        inputs:
          azureSubscription: 'dvl-dev-infocat-ARM'
          addSpnToEnvironment: true
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            # download kubectl and kubelogin
            sudo az aks install-cli --subscription ${{ variables.subscription }} --client-version latest --kubelogin-version latest --only-show-errors

            # download ~/.kube/config file
            az aks get-credentials --resource-group ${{ variables.clusterRg }} --name ${{ variables.clusterName }} --only-show-errors

            # convert ~/.kube/config to a format compatible with kubelogin
            kubelogin convert-kubeconfig --login spn

            # create secure azure devops variables for later steps
            echo "##vso[task.setvariable variable=spnId;isSecret=true]$servicePrincipalId"
            echo "##vso[task.setvariable variable=spnSecret;isSecret=true]$servicePrincipalKey"
      - task: Bash@3
        displayName: Set git commit sha as env var
        inputs:
          targetType: 'inline'
          script: |
            GIT_COMMIT_SHA=$(git rev-parse HEAD)
            echo "GIT_COMMIT_SHA: ${GIT_COMMIT_SHA}"
            echo "##vso[task.setvariable variable=GIT_COMMIT_SHA]${GIT_COMMIT_SHA}"
      - task: Bash@3
        displayName: Retrieve project version
        inputs:
          targetType: 'inline'
          workingDirectory: 'vlaanderen'
          script: |
            VL_GEONETWORK_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            echo "VL_GEONETWORK_VERSION: ${VL_GEONETWORK_VERSION}"
            echo "##vso[task.setvariable variable=VL_GEONETWORK_VERSION]${VL_GEONETWORK_VERSION}"
      - task: Cache@2
        inputs:
          # bump 'versionx' to make sure the cache is cleared
          key: 'version2 | maven | "$(Agent.OS)" | **/pom.xml'
          restoreKeys: |
            maven | "$(Agent.OS)"
            maven
          path: $(mavenCacheFolder)
        displayName: Cache Maven local repo
      - task: Maven@3
        displayName: Build project artifacts
        inputs:
          mavenPomFile: 'pom.xml'
          mavenOptions: '-Xmx3072m $(mavenCacheOpts)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          goals: 'clean install'
          options: ' -DskipTests -Pwar -Dmaven.artifact.threads=30 -Dwro4j-prebuild-cache '
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: 'web/target/geonetwork.war'
          ArtifactName: 'geonetwork.war'
          publishLocation: 'Container'
      - task: Docker@2
        displayName: Build web image and push to preprod container registry (premdacr)
        inputs:
          containerRegistry: 'premdacr'
          repository: 'metadata/geonetwork'
          command: 'buildAndPush'
          Dockerfile: 'web/Dockerfile'
          tags: |
            latest
            $(namespace)
            $(GIT_COMMIT_SHA)
            $(VL_GEONETWORK_VERSION)
      - task: Bash@3
        displayName: Execute liquibase
        env:
          # get the pipeline variables into our task
          LIQUIBASE_GN_SYSTEM_FEEDBACK_MAILSERVER_PASSWORD: $(liquibase.gn.system.feedback.mailserver.password)
          LIQUIBASE_MDV_PASSWORDHASH: $(liquibase.mdv.passwordhash)
          LIQUIBASE_MAILPIT_PORT: $(liquibase.mailpit.port)
          LIQUIBASE_MAILPIT_HOST: $(liquibase.mailpit.host)
          # get additional variables into our task
          LIQUIBASE_GN_SYSTEM_VLAANDEREN_VERSION: $(VL_GEONETWORK_VERSION)
          # needed for kube access
          AAD_SERVICE_PRINCIPAL_CLIENT_ID: $(spnId)
          AAD_SERVICE_PRINCIPAL_CLIENT_SECRET: $(spnSecret)
        inputs:
          targetType: 'inline'
          workingDirectory: 'liquibase'
          script: |
            # create an empty liquibase.properties file
            touch liquibase.properties
            # necessary variables are found in environment
            bash execute-on-env.sh -n $(namespace)
      - task: Bash@3
        displayName: Rolling restart of geonetwork ($(namespace))
        env:
          AAD_SERVICE_PRINCIPAL_CLIENT_ID: $(spnId)
          AAD_SERVICE_PRINCIPAL_CLIENT_SECRET: $(spnSecret)
        inputs:
          targetType: 'inline'
          script: |
            kubectl rollout restart -n $(namespace) deployment/geonetwork
            kubectl rollout restart -n $(namespace) deployment/geonetwork-replica
