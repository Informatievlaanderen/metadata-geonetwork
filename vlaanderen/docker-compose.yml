x-geonetwork-environment:
  &default-geonetwork-environment
  # requestHeaderSize/maxFormContentSize/maxFormKeys: added to improve editing large forms
  JAVA_OPTS: >
    -Djava.security.egd=file:/dev/./urandom
    -Djava.awt.headless=true
    -Djetty.httpConfig.requestHeaderSize=32768
    -Dorg.eclipse.jetty.annotations.AnnotationParser.LEVEL=OFF
    -Dorg.eclipse.jetty.server.Request.maxFormContentSize=500000
    -Dorg.eclipse.jetty.server.Request.maxFormKeys=8000
    -Xms512M -Xss512M -Xmx2G -XX:+UseConcMarkSweepGC
    -Dlog_dir=/geonetwork-data/logs
  DATA_DIR: /geonetwork-data
  GEONETWORK_ES_HOST: elasticsearch
  GEONETWORK_ES_PORT: 9200
  GEONETWORK_ES_PROTOCOL: http
  GEONETWORK_CODELIST_DIR: /var/lib/jetty/webapps/root/WEB-INF/data/config/codelist
  GEONETWORK_DB_HOST: database
  GEONETWORK_DB_NAME: geonetwork
  GEONETWORK_DB_PASSWORD: geonetwork
  GEONETWORK_DB_PORT: 5432
  GEONETWORK_DB_TYPE: postgres
  GEONETWORK_DB_USERNAME: geonetwork
  GEONETWORK_DIR: /geonetwork-data
  GEONETWORK_HTMLCACHE_DIR: /var/lib/jetty/webapps/root/WEB-INF/data/resources/htmlcache
  GEONETWORK_INDEXCONFIG_DIR: /var/lib/jetty/webapps/root/WEB-INF/data/config/index
  GEONETWORK_MICROSERVICESPROXY_TARGETURI: http://ogc-api-records-service:8080
  GEONETWORK_SCHEMA_DIR: /var/lib/jetty/webapps/root/WEB-INF/data/config/schema_plugins
  GEONETWORK_WEBBAPP_CONTEXTPATH: /

x-service-geonetwork:
  &default-service-geonetwork
  image: metadata/geonetwork
  build:
    context: ../web/
    dockerfile: Dockerfile
  depends_on:
    elasticsearch:
      condition: service_healthy
    liquibase:
      condition: service_completed_successfully
  restart: always
  healthcheck:
    test: "curl -f http://localhost:8080/"
    interval: 5s
    timeout: 5s
    retries: 20
  volumes:
    - geonetworkdata:/geonetwork-data

services:
  database:
    command: [ "postgres",
               "-c", "log_statement=all",
               "-c", "logging_collector=true",
               "-c", "log_file_mode=0644",
               "-c", "log_directory=/var/log/postgresql",
               "-c", "log_filename=postgresql.log" ]
    environment:
      POSTGRES_PASSWORD: geonetwork
      POSTGRES_USER: geonetwork
      POSTGRES_DB: geonetwork
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    image: postgres:15.3
    restart: always
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql

  liquibase:
    image: maven
    depends_on:
      database:
        condition: service_healthy
    working_dir: /liquibase
    volumes:
      - ../liquibase:/liquibase
      - ./pom.xml:/vlaanderen.pom.xml
    # Command to run the liquibase update service, makes use of liquibase.properties file
    command: >
      bash -c "mvn liquibase:update -Ploc
      -Dgn.system.vlaanderen.version=$(mvn -f /vlaanderen.pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout)"

  mail:
    image: axllent/mailpit:v1.8
    ports:
      - "1025:1025"
      - "8025:8025"
    environment:
      TZ: Europe/Brussels

  geonetwork-replica:
    <<: *default-service-geonetwork
    depends_on:
      geonetwork:
        condition: service_healthy
    environment:
      <<: *default-geonetwork-environment
      HARVESTER_SCHEDULER_ENABLED: false
      HARVESTER_REFRESH_INTERVAL_MINUTES: 0

  geonetwork:
    <<: *default-service-geonetwork
    environment:
      <<: *default-geonetwork-environment
      HARVESTER_SCHEDULER_ENABLED: true
      HARVESTER_REFRESH_INTERVAL_MINUTES: 2

  geonetwork-reindexer:
    image: metadata/geonetwork-reindexer
    depends_on:
      geonetwork:
        condition: service_healthy
    build:
      context: geonetwork-reindexer
      dockerfile: Dockerfile

  ogc-api-records-service:
    image: geonetwork/gn-cloud-ogc-api-records-service:0.2.0
    depends_on:
      liquibase:
        condition: service_completed_successfully
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: "timeout 10s bash -c ':> /dev/tcp/127.0.0.1/8080' || exit 1"
      interval: 10s
      timeout: 2s
      retries: 10
    environment:
      SPRING_PROFILES_ACTIVE: standalone
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/geonetwork
      SPRING_DATASOURCE_USERNAME: geonetwork
      SPRING_DATASOURCE_PASSWORD: geonetwork
      GN_BASEURL: http://geonetwork:8080/geonetwork/api
      GN_LEGACY_URL: http://geonetwork:8080/geonetwork
      GN_INDEX_URL: http://elasticsearch:9200
      SERVER_FORWARDHEADERSSTRATEGY: FRAMEWORK

  elasticsearch:
    image: elasticsearch:8.14.3
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test: "curl -s http://localhost:9200 >/dev/null || exit 1"
      interval: 10s
      timeout: 2s
      retries: 10
    environment:
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      bootstrap.memory_lock: true
      cluster.name: docker-cluster
      discovery.type: single-node
      xpack.security.enabled: false
      xpack.security.enrollment.enabled: false
